def taille(A):
    n=len(A)
    p=len(A[0])
    return n,p
    
def creer(n,p,v):
    M=[0]*n
    for i in range(n):
        M[i]=[v]*p
    return M

def somme_matrice(A,B):
    C=creer(taille(A)[0],taille(A)[1],0)
    for i in range(taille(A)[0]):
        for j in range(taille(A)[1]):
            C[i][j]+=A[i][j]+B[i][j]
    return C

def produit_scalaire(A,a):
    n,p=taille(A)
    C=creer(n,p,0)
    for i in range(n):
        for j in range(p):
            C[i][j]+=a*A[i][j]
    return C

def produit_matriciel(A,B):
    C=creer(taille(A)[0],taille(B)[1],0)
    for i in range(taille(A)[0]):
        for j in range(taille(B)[1]):
            for k in range(taille(A)[1]):
                C[i][j]+=A[i][k]*B[k][j]
    return C

def somme_ligne(A):
    n,p=taille(A)
    B=creer(n,1,0)
    for k in range(0,n):
        for j in range(0,p):
            B[k][0]+=A[k][j]
    return B

#JABER Bassem
#Programmation naïve à l'aide d'opérations usuelles
def mat_S(L):
    n,p=taille(L)
    M=somme_ligne(L)
    for k in range(0,n):
        if M[k][0]!=0:
            for j in range(0,p):
                L[k][j]=L[k][j]/M[k][0]
        else:
            for j in range(0,p):
                L[k][j]=1/p
    return L

def mat_G(S,a):
    n,p=taille(S)
    E=creer(n,p,1)
    return somme_matrice(produit_scalaire(S,a),produit_scalaire(E,1-a))

def puissance(A,q):
    B=A
    for k in range(q):
        A=produit_matriciel(A,B)
    return A
def normalisation(L):
    n,p=taille(L)
    M=somme_ligne(L)
    for k in range(0,n):
        for j in range(0,p):
            L[k][j]=L[k][j]/M[k][0]
    return L
    
def lisible(L):
    n,p=taille(L)
    for k in range(0,n):
        for j in range(0,p):
            L[k][j]=1000*L[k][j]
            L[k][j]=int(L[k][j])
            L[k][j]=L[k][j]/1000
    return L

A=[[0,0,1,0,1,0,0,0,0,0],
[0,0,0,0,1,0,1,0,0,0],
[1,0,0,0,0,0,0,1,1,0],
[0,0,0,0,0,1,0,1,0,0],
[0,1,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,0,1,1],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,1,0,0,1,0,0,0],
[0,0,0,1,0,0,0,0,0,1],
[0,0,1,0,0,0,0,0,0,0]
]

>>> lisible(mat_S(A))
[[0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0], 
[0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0], 
[0.333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.333, 0.333, 0.0], 
[0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0], 
[0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0], 
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5], 
[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], 
[0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0], 
[0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5], 
[0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
]

>>> lisible(normalisation(mat_G(mat_S(A),0.85)))
[[0.063, 0.063, 0.244, 0.063, 0.244, 0.063, 0.063, 0.063, 0.063, 0.063], 
[0.063, 0.063, 0.063, 0.063, 0.244, 0.063, 0.244, 0.063, 0.063, 0.063], 
[0.184, 0.063, 0.063, 0.063, 0.063, 0.063, 0.063, 0.184, 0.184, 0.063], 
[0.063, 0.063, 0.063, 0.063, 0.063, 0.244, 0.063, 0.244, 0.063, 0.063], 
[0.063, 0.244, 0.063, 0.063, 0.063, 0.063, 0.244, 0.063, 0.063, 0.063], 
[0.063, 0.063, 0.063, 0.063, 0.063, 0.063, 0.063, 0.063, 0.244, 0.244], 
[0.099, 0.099, 0.099, 0.099, 0.099, 0.099, 0.099, 0.099, 0.099, 0.099], 
[0.063, 0.063, 0.063, 0.244, 0.063, 0.063, 0.244, 0.063, 0.063, 0.063], 
[0.063, 0.063, 0.063, 0.244, 0.063, 0.063, 0.063, 0.063, 0.063, 0.244], 
[0.063, 0.063, 0.425, 0.063, 0.063, 0.063, 0.063, 0.063, 0.063, 0.063]
]
t1=clock();lisible(puissance(normalisation(mat_G(mat_S(A),0.85)),10000));clock()-t1
[[0.082, 0.086, 0.119, 0.104, 0.098, 0.087, 0.119, 0.101, 0.098, 0.101], 
[0.082, 0.086, 0.119, 0.104, 0.098, 0.087, 0.119, 0.101, 0.098, 0.101], 
[0.082, 0.086, 0.119, 0.104, 0.098, 0.087, 0.119, 0.101, 0.098, 0.101], 
[0.082, 0.086, 0.119, 0.104, 0.098, 0.087, 0.119, 0.101, 0.098, 0.101], 
[0.082, 0.086, 0.119, 0.104, 0.098, 0.087, 0.119, 0.101, 0.098, 0.101], 
[0.082, 0.086, 0.119, 0.104, 0.098, 0.087, 0.119, 0.101, 0.098, 0.101], 
[0.082, 0.086, 0.119, 0.104, 0.098, 0.087, 0.119, 0.101, 0.098, 0.101], 
[0.082, 0.086, 0.119, 0.104, 0.098, 0.087, 0.119, 0.101, 0.098, 0.101], 
[0.082, 0.086, 0.119, 0.104, 0.098, 0.087, 0.119, 0.101, 0.098, 0.101], 
[0.082, 0.086, 0.119, 0.104, 0.098, 0.087, 0.119, 0.101, 0.098, 0.101]
]
4.106310964059958
t1=clock();lisible(puissance(normalisation(mat_G(mat_S(A),0.85)),2));clock()-t1
[[0.08, 0.084, 0.118, 0.107, 0.105, 0.084, 0.124, 0.096, 0.094, 0.102], 
[0.081, 0.086, 0.118, 0.102, 0.104, 0.086, 0.123, 0.099, 0.097, 0.1], 
[0.083, 0.088, 0.121, 0.099, 0.095, 0.092, 0.117, 0.107, 0.097, 0.097], 
[0.08, 0.084, 0.126, 0.105, 0.096, 0.09, 0.114, 0.102, 0.094, 0.104], 
[0.081, 0.092, 0.118, 0.102, 0.098, 0.086, 0.123, 0.099, 0.097, 0.1], 
[0.087, 0.083, 0.124, 0.098, 0.094, 0.089, 0.113, 0.109, 0.101, 0.096], 
[0.082, 0.086, 0.12, 0.103, 0.098, 0.086, 0.12, 0.101, 0.098, 0.101],
 [0.08, 0.085, 0.116, 0.106, 0.097, 0.085, 0.122, 0.097, 0.101, 0.105], 
 [0.087, 0.083, 0.113, 0.104, 0.094, 0.083, 0.119, 0.103, 0.107, 0.102], 
 [0.079, 0.083, 0.12, 0.114, 0.102, 0.083, 0.12, 0.095, 0.093, 0.104]
 ]
0.0013711373503610957
